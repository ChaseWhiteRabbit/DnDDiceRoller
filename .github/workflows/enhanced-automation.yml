name: Enhanced Project Automation

on:
  issues:
    types: [opened, closed, reopened, labeled, unlabeled, assigned, edited]
  pull_request:
    types: [opened, closed, reopened, review_requested, ready_for_review, converted_to_draft, edited]
  pull_request_review:
    types: [submitted, dismissed]

jobs:
  manage_project_items:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const { issue, pull_request, review } = context.payload;
            const item = issue || pull_request;
            
            // Function to set project status and fields
            async function updateProjectItem(itemId, status, fields = {}) {
              // Update status
              if (status) {
                await setProjectStatus(itemId, status);
              }
              
              // Update fields
              for (const [field, value] of Object.entries(fields)) {
                await setProjectField(itemId, field, value);
              }
            }
            
            // Handle different event types
            if (context.eventName === 'issues') {
              const fields = {};
              
              // Set priority based on labels
              if (item.labels.find(l => l.name === 'priority: high')) {
                fields.Priority = 'High';
              } else if (item.labels.find(l => l.name === 'priority: low')) {
                fields.Priority = 'Low';
              } else {
                fields.Priority = 'Medium';
              }
              
              // Set type based on labels
              if (item.labels.find(l => l.name === 'bug')) {
                fields.Type = 'Bug';
              } else if (item.labels.find(l => l.name === 'enhancement')) {
                fields.Type = 'Feature';
              }
              
              // Handle different actions
              switch (context.payload.action) {
                case 'opened':
                  await updateProjectItem(item.node_id, 'Backlog', fields);
                  break;
                case 'assigned':
                  await updateProjectItem(item.node_id, 'Ready for Development', fields);
                  break;
                case 'closed':
                  await updateProjectItem(item.node_id, 'Done', fields);
                  break;
              }
            } else if (context.eventName === 'pull_request') {
              const fields = {
                Type: 'Enhancement',
                Priority: 'Medium'
              };
              
              switch (context.payload.action) {
                case 'opened':
                  await updateProjectItem(item.node_id, 'In Progress', fields);
                  break;
                case 'ready_for_review':
                  await updateProjectItem(item.node_id, 'In Review', fields);
                  break;
                case 'closed':
                  if (item.merged) {
                    await updateProjectItem(item.node_id, 'Done', fields);
                  }
                  break;
              }
            } else if (context.eventName === 'pull_request_review') {
              if (review.state === 'approved') {
                await updateProjectItem(pull_request.node_id, 'Ready for Development');
              } else if (review.state === 'changes_requested') {
                await updateProjectItem(pull_request.node_id, 'In Progress');
              }
            }

  notify_slack:
    runs-on: ubuntu-latest
    needs: manage_project_items
    if: always()
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  update_linked_items:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const { issue, pull_request } = context.payload;
            const item = issue || pull_request;
            
            // Look for linked items in the body
            const linkedItemsRegex = /(?:closes|fixes|resolves) #(\d+)/gi;
            const matches = item.body.matchAll(linkedItemsRegex);
            
            for (const match of matches) {
              const linkedIssueNumber = match[1];
              // Update linked issue status
              if (context.payload.action === 'closed' && item.merged) {
                await updateProjectItem(linkedIssueNumber, 'Done');
              }
            }
